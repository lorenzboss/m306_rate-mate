name: Deploy to AWS

on:
  push:
    branches: [ production ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm rebuild lightningcss --build-from-source
      
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PEPPER_SECRET: ${{ secrets.PEPPER_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NODE_ENV: production
      
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r .next deploy/
          cp -r public deploy/
          cp package*.json deploy/
          cp -r prisma deploy/
          
          # Create production .env file
          cat > deploy/.env << EOF
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          PEPPER_SECRET="${{ secrets.PEPPER_SECRET }}"
          NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
          NODE_ENV="production"
          EOF
          
          # Create ecosystem file for PM2
          cat > deploy/ecosystem.config.js << EOF
          module.exports = {
            apps: [{
              name: 'ratemate',
              script: 'npm',
              args: 'start',
              cwd: '/var/www/ratemate',
              env: {
                NODE_ENV: 'production',
                PORT: 3000
              }
            }]
          }
          EOF
      
      - name: Deploy to AWS server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Create app directory if it doesn't exist
            sudo mkdir -p /var/www/ratemate
            sudo chown $USER:$USER /var/www/ratemate
            
            # Remove old deployment (keep backups)
            if [ -d "/var/www/ratemate.backup" ]; then
              sudo rm -rf /var/www/ratemate.backup
            fi
            if [ -d "/var/www/ratemate" ]; then
              sudo mv /var/www/ratemate /var/www/ratemate.backup
            fi
            
            # Create new directory
            mkdir -p /var/www/ratemate
      
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "deploy/*"
          target: "/var/www/ratemate"
          strip_components: 1
      
      - name: Install dependencies and restart application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            cd /var/www/ratemate
            
            # Install dependencies
            npm ci --only=production
            
            # Run database migrations
            npx prisma migrate deploy
            npx prisma generate
            
            # Install PM2 globally if not installed
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            # Stop existing process
            pm2 stop ratemate 2>/dev/null || true
            pm2 delete ratemate 2>/dev/null || true
            
            # Start new process
            pm2 start ecosystem.config.js
            pm2 save
            
            # Setup PM2 startup if not already done
            sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME || true